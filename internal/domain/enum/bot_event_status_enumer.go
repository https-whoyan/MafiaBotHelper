// Code generated by "enumer -type=BotEventType -json -trimprefix BotEventType -transform=snake -output bot_event_status_enumer.go"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BotEventTypeName = "stay_reactionsend_vote"

var _BotEventTypeIndex = [...]uint8{0, 13, 22}

const _BotEventTypeLowerName = "stay_reactionsend_vote"

func (i BotEventType) String() string {
	if i >= BotEventType(len(_BotEventTypeIndex)-1) {
		return fmt.Sprintf("BotEventType(%d)", i)
	}
	return _BotEventTypeName[_BotEventTypeIndex[i]:_BotEventTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BotEventTypeNoOp() {
	var x [1]struct{}
	_ = x[BotEventTypeStayReaction-(0)]
	_ = x[BotEventTypeSendVote-(1)]
}

var _BotEventTypeValues = []BotEventType{BotEventTypeStayReaction, BotEventTypeSendVote}

var _BotEventTypeNameToValueMap = map[string]BotEventType{
	_BotEventTypeName[0:13]:       BotEventTypeStayReaction,
	_BotEventTypeLowerName[0:13]:  BotEventTypeStayReaction,
	_BotEventTypeName[13:22]:      BotEventTypeSendVote,
	_BotEventTypeLowerName[13:22]: BotEventTypeSendVote,
}

var _BotEventTypeNames = []string{
	_BotEventTypeName[0:13],
	_BotEventTypeName[13:22],
}

// BotEventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BotEventTypeString(s string) (BotEventType, error) {
	if val, ok := _BotEventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BotEventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BotEventType values", s)
}

// BotEventTypeValues returns all values of the enum
func BotEventTypeValues() []BotEventType {
	return _BotEventTypeValues
}

// BotEventTypeStrings returns a slice of all String values of the enum
func BotEventTypeStrings() []string {
	strs := make([]string, len(_BotEventTypeNames))
	copy(strs, _BotEventTypeNames)
	return strs
}

// IsABotEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BotEventType) IsABotEventType() bool {
	for _, v := range _BotEventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BotEventType
func (i BotEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BotEventType
func (i *BotEventType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BotEventType should be a string, got %s", data)
	}

	var err error
	*i, err = BotEventTypeString(s)
	return err
}
